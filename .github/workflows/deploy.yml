name: Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}

      - name: Detect Modified Services
        id: detect-changes
        run: |
          # Check if there is more than one commit
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            CHANGED_SERVICES=$(git diff --name-only HEAD~1 HEAD | grep '^src/' | grep -E '\.(js|py|go|html|yaml|json)$' | cut -d'/' -f2 | sort -u)
          else
            # In the first commit, consider all services as changed
            CHANGED_SERVICES=$(find src -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
          fi

          # Convert the output to a single space-separated line
          CHANGED_SERVICES=$(echo $CHANGED_SERVICES | tr '\n' ' ')
          echo "Changed services: $CHANGED_SERVICES"
          echo "services=${CHANGED_SERVICES}" >> $GITHUB_ENV

      - name: Build and Push Modified Docker Images
        if: env.services != ''
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
        run: |
          for service in $services; do
            service_path="src/$service"
            if [ -f "$service_path/Dockerfile" ]; then
              echo "Building and pushing $service..."
              docker build -t $ECR_REGISTRY/eboutique/$service:latest $service_path
              docker push $ECR_REGISTRY/eboutique/$service:latest
            else
              echo "Dockerfile not found in $service_path, skipping..."
            fi
          done

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name eboutique-cluster --region ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes Deployment for Modified Services
        if: env.services != ''
        run: |
          for service in $services; do
            echo "Updating Kubernetes deployment for $service..."
            kubectl set image deployment/$service $service=${{ secrets.AWS_ECR_REGISTRY }}/eboutique/$service:latest || true
          done

      - name: Update Kubernetes Deployment for Modified Services
        if: env.services != ''
        run: |
          for service in $services; do
            echo "Updating Kubernetes deployment for $service..."
            kubectl set image deployment/$service $service=${{ secrets.AWS_ECR_REGISTRY }}/eboutique/$service:latest || true
          done
